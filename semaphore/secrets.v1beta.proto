syntax = "proto3";

package semaphore.secrets.v1beta;

service SecretsApi {
  rpc ListSecrets(ListSecretsRequest) returns (ListSecretsResponse);
  rpc GetSecret(GetSecretRequest) returns (Secret);
  rpc CreateSecret(Secret) returns (Secret);
  rpc UpdateSecret(UpdateSecretRequest) returns (Secret);
  rpc DeleteSecret(DeleteSecretRequest) returns (Empty);
}

//
// Errors are returned as the message field in the Grpc error.
//
// Errors are serialized as JSON messages.
//
// Example:
//
//    error = Error.new(
//      type: Error.Type.INVALID_NAME,
//      description: "Secret's name can't be blank.")
//
//    raise GRPC.Error.new(
//      status: :PRECONDITION_FAILED,
//      message: JSON.encode(error))
//
message Error {
  enum Type {
    //
    // Grpc Status :PRECONDITION_FAILED
    //
    // Raised when the name of the Secret is not valid.
    //
    // Examples:
    //   - Name is blank.
    //   - Name is not an alphanumeric word.
    //   - Name has an UUID format.
    //
    INVALID_NAME = 0;
  }

  Type type = 1;
  string description = 2;
}

message Secret {
  message Metadata {
    string name = 1;
    string id = 2;
  }
  
  message EnvVar {
    string name = 1;
    string value = 2;
  }

  message File {
    string path = 1;
    string content = 2;
  }
  
  message Data {
    repeated EnvVar env_vars = 1;
    repeated File files = 2;
  }

  Metadata metadata = 1;
  Data data = 2;
}

message ListSecretsRequest {
  int32 page_size = 1;
  string page_token = 2;
}

message ListSecretsResponse {
  repeated Secret secrets = 1;

  string next_page_token = 2;
  int32 total_size = 3;
}

message GetSecretRequest {
  string secret_id_or_name = 1;
}

message UpdateSecretRequest {
  string secret_id_or_name = 1;

  Secret secret = 2;
}

message DeleteSecretRequest {
  string secret_id_or_name = 1;
}

message Empty {}
