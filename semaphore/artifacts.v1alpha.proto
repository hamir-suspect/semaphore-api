syntax = "proto3";

package semaphore.artifacts.v1alpha;

option go_package = "signed_urls";

// all operations are synchronous
service ArtifactsService {
  rpc Push(PushRequest) returns (PushResponse);
  rpc Pull(PullRequest) returns (PullResponse);
  rpc Yank(YankRequest) returns (YankResponse);
}

// Request for Push
// Contains a list of paths to upload.
// If the push has an expire to be set, it's appended to the paths list, and it will be appended to the urls as well.
// If the push is not forced, the first of every two signed URLs is a HEAD to check if they can be overwritten.
message PushRequest {
  repeated string paths = 1;
  bool force = 2;
}

// Response for Push
// Contains a list of Signed URLs
message PushResponse {
  repeated SignedURL urls = 1;
}

// Request for Pull
// Contains a path to download from
message PullRequest {
  string path = 1;
}

// Response for Pull
// Contains a list of Signed URLs
message PullResponse {
  repeated SignedURL urls = 1;
}

// Request for Yank
// Contains a path to delete
message YankRequest {
  string path = 1;
}

// Response for Yank
message YankResponse {
  repeated SignedURL urls = 1;
}

// Contains an url and its method type
// The path on the GCS can be parsed out of it, so it is not needed
message SignedURL {
  string url = 1;
  enum Method {
    DELETE = 0; // deletes storage object or path
    GET = 1; // reads storage object
    HEAD = 2; // queries object or path existance
    PUT = 3; // overwrites storage object
    POST = 4; // concatenates to storage object
  }
  Method method = 2;
}
