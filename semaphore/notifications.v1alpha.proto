syntax = "proto3";

package semaphore.notifications.v1alpha;

option go_package = "./notifications.v1alpha;semaphore_notifications_v1alpha";

service NotificationsApi {
  rpc ListNotifications(ListNotificationsRequest) returns (ListNotificationsResponse);
  rpc GetNotification(GetNotificationRequest) returns (Notification);
  rpc CreateNotification(Notification) returns (Notification);
  rpc UpdateNotification(UpdateNotificationRequest) returns (Notification);
  rpc DeleteNotification(DeleteNotificationRequest) returns (Empty);
}

message Notification {
  message Metadata {
    string name = 1;
    string id = 2;

    int64 create_time = 3; // unix timestamp of creation
    int64 update_time = 4; // unix timestamp of last update
  }

  message Spec {
    message Rule {
      message Filter {
        enum State {
          STARTED = 0;
          FINISHED = 1;
        }

        // List of projects to trigger this rule.
        // By default: No project.
        //
        // Rule is invalid if list of projects is empty.
        //
        // Examples:
        //   - "cli" - strictly match the CLI project
        //   - "/^s2-*/" - regex mathes projects that start with 's2-' prefix
        //
        repeated string projects = 1;

        // List of branches to trigger this rule.
        // Default: all branches.
        //
        // Examples:
        //   - "master" - strictly match the master branch
        //   - "/^release-*/" - regex matches branches that start with 'release-' prefix
        //
        repeated string branches = 2;

        // List of pipelines to trigger this rule.
        // Default only: .semaphore/semaphore.yml.
        //
        // Examples:
        //   - ".seamphore/semaphore.yml" - strictly match the .semaphore/semaphore.yml pipeline
        //   - "/^.semaphore/stg-*/" - regex matches pipelines that start with '.semaphore/stg-' prefix
        //
        repeated string pipelines = 3;

        // List of blocks to trigger this rule.
        // Default: no block.
        //
        // Examples:
        //   - "tests" - strictly match the tests block in pipelines
        //   - "/^unit-*/" - regex matches blocks that start with 'unit-' prefix
        //
        repeated string blocks = 4;

        // List of states that trigger this rule.
        // Default: only FINISHED.
        repeated State states = 5;

        // List of results to trigger this rule.
        // Default: every result.
        repeated string results = 6;
      }

      message Notify {
        enum Status {
          ACTIVE = 0;
          INACTIVE = 1;
        }

        //
        // Description of the slack notification.
        // [required] endpoint - slack webhook to hit
        // [optional] channels - list of channels, default: taken from endpoint
        // [optional] message - default: TODO
        // [optional] status - activity status. Default: ACTIVE
        //
        message Slack {
          string endpoint = 1;
          repeated string channels = 2;
          string message = 3;
          Status status = 4;
        }

        //
        // Description of the email notification.
        // [optional] subject - the subject line of the email. Default: TODO
        // [required] cc - email addresses in the CC field. At least one is required.
        // [optional] bcc - email addresses in the BCC field.
        // [optional] content - content of the email. Default: TODO
        // [optional] status - activity status. Default: ACTIVE
        //
        message Email {
          string subject = 1;
          repeated string cc = 2;
          repeated string bcc = 3;
          string content = 4;
          Status status = 5;
        }

        //
        // Description of the email notification.
        // [required] endpoint - HTTP endpoint to hit.
        // [optional] timeout - delivery timeout. Defualt: 500ms. Must be in range (0..1000)ms.
        // [optional] action - http verb to use. Default: POST.
        // [optional] retries - number of times to retry delivery. Default: 1. Muse be in range (1..3).
        // [optional] status - activity status. Default: ACTIVE
        // [optional] secret - name of a Semaphore secret, which will be used to sign the payload.
        //
        message Webhook {
          string endpoint = 1;
          int32 timeout = 2;
          string action = 3;
          int32 retries = 4;
          Status status = 5;
          string secret = 6;
        }

        Slack slack = 2;
        Email email = 3;
        Webhook webhook = 4;
      }

      // [optional] name of the rule
      string name = 1;
      Filter filter = 2;
      Notify notify = 3;
    }

    // Rules must have at least one element. Maximal number of rules: 20.
    repeated Rule rules = 1;
  }

  message Status {
    //
    // A failure contains a timestamp and a description of a failure
    //
    message Failure {
      int64 time = 1; // unix timestamp of failure occurance
      string message = 2; // message describing the failure
    }

    //
    // Lists the 100 most recent notification failures
    //
    // examples:
    //  sending webhook to https://my.service/semaphore failed with http timeout after 500ms
    //
    repeated Failure failures = 1;
  }

  Metadata metadata = 1;
  Spec spec = 2;
  Status status = 3;
}

message ListNotificationsRequest {
  enum Order {
    BY_NAME_ASC = 0;
  }

  int32 page_size = 1;
  string page_token = 2;
  Order order = 3;
}

message ListNotificationsResponse {
  repeated Notification notifications = 1;

  string next_page_token = 2;
}

message GetNotificationRequest {
  string notification_id_or_name = 1;
}

message UpdateNotificationRequest {
  string notification_id_or_name = 1;

  Notification notification = 2;
}

message DeleteNotificationRequest {
  string notification_id_or_name = 1;
}

message Empty {}
